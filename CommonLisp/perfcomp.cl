(defstruct activity id lat lng)
(defstruct resource id lat lng)
(defstruct allocation resource-id activity-id distance)
(defstruct schema-data activities resources allocations)

(defconstant earth-radius 6367450.0)
(defconstant convert-to-rad (/ pi 180.0))
(defconstant convert-to-deg (/ 180.0 pi))

(defun distance-between-points-lat-long (lat1 lon1 lat2 lon2)
  (let* ((dStartLatInRad (* lat1 convert-to-rad))
        (dStartLongInRad (* lon1 convert-to-rad))
        (dEndLatInRad (* lat2 convert-to-rad))
        (dEndLongInRad (* lon2 convert-to-rad))
        (dLongitude (- dEndLongInRad dStartLongInRad))
        (dLatitude (- dEndLatInRad dStartLatInRad))
        (dSinHalfLatitude (sin (* dLatitude 0.5)))
        (dSinHalfLongitude (sin (* dLongitude 0.5)))
        (a (+ (* dSinHalfLatitude dSinHalfLatitude) (* (cos dStartLatInRad) (cos dEndLatInRad) dSinHalfLongitude dSinHalfLongitude)))
        (c (atan (sqrt a) (sqrt (- 1.0 a)))))
    (* earth-radius (+ c c))))

;(format t "~D" (distance-between-points-lat-long 52.895461 -1.702781 53.157758 -1.760560))
(format t "~S" (split-sequence #\Space "a ndd ss"))
(with-open-file (stream "/Users/daryl/Source/SkylinedSoftware/Prototypes/PerformanceComparison/Data/DataSPIF.csv" :direction :input)
  (let ((line (read-line stream)))
    (format t "~S" line)
  ))